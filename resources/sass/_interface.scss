$color-btn-text: $color-backgrounds;
$color-btn-default: $color-main;
$color-btn-hot: $red;
$color-btn-cool: $blue;
$roundness: 20px 0 20px 0;
/* 
Extensible button code
%btn {
	display: inline-block;
	padding: 6px 12px;
	text-align: center;
	white-space: nowrap;
	vertical-align: middle;
	cursor: pointer;
	border: none;
	border-radius: 4px;
	font-family: $font-highlight;
	user-select: none;
	color: $color-btn-text;
}

.btn-default {
	@extend %btn;
  background: $color-btn-default;
  border: 2px $blue dotted;
}

.btn-hot {
	@extend %btn;
	background: $color-btn-hot;
}

.btn-cool {
	@extend %btn;
	background: $color-btn-cool;
} */

.grid {
	@include clearfix;
	.item {
		float: left; // maybe this should go in the cardgrid class
    @include cardgrid(4, 4%); 
    // TODO:
    // to make this pattern really useful, it has to resize the height of the row to match the tallest product card child
    // Therefore, there has to be a check at the end of each rown in the cardgrid mixin. The mixin must keep track of the tallest card as it processes them, with a variable called tallest?
  }
  
	.product-card { // title, price, add to cart
		display: block;
		border-radius: nth($roundness, 4);
    max-width: 100%;
   
  }
  
}

.product-card {
  
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  max-width: 300px;
  text-align: center;
  font-family: arial;
  
  img {
    max-width: 100%;
    padding-bottom:5%;
  }

  .price {
    color: grey;
    font-size: 22px;
  }

  .button {
    border: none;
    outline: 0;
    padding: 12px;
    color: rgb(255, 255, 255);
    background-color: rgb(0, 0, 0);
    text-align: center;
    cursor: pointer;
    width: 100%;
    font-size: 1.25rem;

    &:hover {
      opacity: 0.7;
    }
  }

}
